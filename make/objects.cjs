const simdRegTypenames = {
    MMX: {
        INT8: "__m64",
        INT16: "__m64",
        INT32: "__m64",
        UINT8: "__m64",
        UINT16: "__m64",
        UINT32: "__m64",
    },
    SSE: {
        FLOAT32: "__m128",
    },
    SSE2: {
        INT8: "__m128i",
        INT16: "__m128i",
        INT32: "__m128i",
        INT64: "__m128i",
        UINT8: "__m128i",
        UINT16: "__m128i",
        UINT32: "__m128i",
        UINT64: "__m128i",
        FLOAT64: "__m128d",
    },
    AVX: {
        FLOAT32: "__m256",
        FLOAT64: "__m256d",
    },
    AVX2: {
        INT8: "__m256i",
        INT16: "__m256i",
        INT32: "__m256i",
        INT64: "__m256i",
        UINT8: "__m256i",
        UINT16: "__m256i",
        UINT32: "__m256i",
        UINT64: "__m256i",
    },
}; // simdRegTypenames

const supportedOps = {
    MMX: {
        ADD: {
            INT8: true,
            INT16: true,
            INT32: true,
            INT64: false,
            INT128: false,
            UINT8: true,
            UINT16: true,
            UINT32: true,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: false,
            FLOAT128: false,
        }, // ADD
        SUB: {
            INT8: true,
            INT16: true,
            INT32: true,
            INT64: false,
            INT128: false,
            UINT8: true,
            UINT16: true,
            UINT32: true,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: false,
            FLOAT128: false,
        }, // SUB
        MUL: {
            INT8: false,
            INT16: true,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: true,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: false,
            FLOAT128: false,
        }, // MUL
        DIV: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: false,
            FLOAT128: false,
        }, // DIV
    }, // MMX
    SSE: {
        ADD: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: true,
            FLOAT64: false,
            FLOAT128: false,
        }, // ADD
        SUB: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: true,
            FLOAT64: false,
            FLOAT128: false,
        }, // SUB
        MUL: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: true,
            FLOAT64: false,
            FLOAT128: false,
        }, // MUL
        DIV: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: true,
            FLOAT64: false,
            FLOAT128: false,
        }, // DIV
    }, // SSE
    SSE2: {
        ADD: {
            INT8: true,
            INT16: true,
            INT32: true,
            INT64: true,
            INT128: false,
            UINT8: true,
            UINT16: true,
            UINT32: true,
            UINT64: true,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: true,
            FLOAT128: false,
        }, // ADD
        SUB: {
            INT8: true,
            INT16: true,
            INT32: true,
            INT64: true,
            INT128: false,
            UINT8: true,
            UINT16: true,
            UINT32: true,
            UINT64: true,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: true,
            FLOAT128: false,
        }, // SUB
        MUL: {
            INT8: false,
            INT16: true,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: true,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: true,
            FLOAT128: false,
        }, // MUL
        DIV: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: true,
            FLOAT128: false,
        }, // DIV
    }, // SSE2
    AVX: {
        ADD: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: true,
            FLOAT64: true,
            FLOAT128: false,
        }, // ADD
        SUB: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: true,
            FLOAT64: true,
            FLOAT128: false,
        }, // SUB
        MUL: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: true,
            FLOAT64: true,
            FLOAT128: false,
        }, // MUL
        DIV: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: true,
            FLOAT64: true,
            FLOAT128: false,
        }, // DIV
    }, // AVX
    AVX2: {
        ADD: {
            INT8: true,
            INT16: true,
            INT32: true,
            INT64: true,
            INT128: false,
            UINT8: true,
            UINT16: true,
            UINT32: true,
            UINT64: true,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: false,
            FLOAT128: false,
        }, // ADD
        SUB: {
            INT8: true,
            INT16: true,
            INT32: true,
            INT64: true,
            INT128: false,
            UINT8: true,
            UINT16: true,
            UINT32: true,
            UINT64: true,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: false,
            FLOAT128: false,
        }, // SUB
        MUL: {
            INT8: false,
            INT16: true,
            INT32: true,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: true,
            UINT32: true,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: false,
            FLOAT128: false,
        }, // MUL
        DIV: {
            INT8: false,
            INT16: false,
            INT32: false,
            INT64: false,
            INT128: false,
            UINT8: false,
            UINT16: false,
            UINT32: false,
            UINT64: false,
            UINT128: false,
            FLOAT16: false,
            FLOAT32: false,
            FLOAT64: false,
            FLOAT128: false,
        }, // DIV
    }, // AVX2
}; // supportedOps

const functions = {
    MMX: {
        PACK_ALIGNED: {
            INT8: "[](const int8_t* ptr) {return *reinterpret_cast<const __m64*>(ptr);}",
            INT16: "[](const int16_t* ptr) {return *reinterpret_cast<const __m64*>(ptr);}",
            INT32: "[](const int32_t* ptr) {return *reinterpret_cast<const __m64*>(ptr);}",
            UINT8: "[](const uint8_t* ptr) {return *reinterpret_cast<const __m64*>(ptr);}",
            UINT16: "[](const uint16_t* ptr) {return *reinterpret_cast<const __m64*>(ptr);}",
            UINT32: "[](const uint32_t* ptr) {return *reinterpret_cast<const __m64*>(ptr);}",
        },
        PACK_UNALIGNED: {
            INT8: "[](const int8_t* ptr) {uint64_t temp; std::memcpy(&temp, ptr, sizeof(temp)); return *reinterpret_cast<__m64*>(&temp);}",
            INT16: "[](const int16_t* ptr) {uint64_t temp; std::memcpy(&temp, ptr, sizeof(temp)); return *reinterpret_cast<__m64*>(&temp);}",
            INT32: "[](const int32_t* ptr) {uint64_t temp; std::memcpy(&temp, ptr, sizeof(temp)); return *reinterpret_cast<__m64*>(&temp);}",
            UINT8: "[](const uint8_t* ptr) {uint64_t temp; std::memcpy(&temp, ptr, sizeof(temp)); return *reinterpret_cast<__m64*>(&temp);}",
            UINT16: "[](const uint16_t* ptr) {uint64_t temp; std::memcpy(&temp, ptr, sizeof(temp)); return *reinterpret_cast<__m64*>(&temp);}",
            UINT32: "[](const uint32_t* ptr) {uint64_t temp; std::memcpy(&temp, ptr, sizeof(temp)); return *reinterpret_cast<__m64*>(&temp);}",
        },
        ADD: {
            INT8: "_mm_add_pi8",
            INT16: "_mm_add_pi16",
            INT32: "_mm_add_pi32",
            UINT8: "_mm_add_pi8",
            UINT16: "_mm_add_pi16",
            UINT32: "_mm_add_pi32",
        },
        SUB: {
            INT8: "_mm_sub_pi8",
            INT16: "_mm_sub_pi16",
            INT32: "_mm_sub_pi32",
            UINT8: "_mm_sub_pi8",
            UINT16: "_mm_sub_pi16",
            UINT32: "_mm_sub_pi32",
        },
        MUL: {
            INT16: "_mm_mullo_pi16",
            UINT16: "_mm_mullo_pi16",
        },
        DIV: {
            // no support
        },
        UNPACK_ALIGNED: {
            INT8: "[](int8_t *ptr, const __m64 vec) {*reinterpret_cast<__m64*>(ptr) = vec;}",
            INT16: "[](int16_t *ptr, const __m64 vec) {*reinterpret_cast<__m64*>(ptr) = vec;}",
            INT32: "[](int32_t *ptr, const __m64 vec) {*reinterpret_cast<__m64*>(ptr) = vec;}",
            UINT8: "[](uint8_t *ptr, const __m64 vec) {*reinterpret_cast<__m64*>(ptr) = vec;}",
            UINT16: "[](uint16_t *ptr, const __m64 vec) {*reinterpret_cast<__m64*>(ptr) = vec;}",
            UINT32: "[](uint32_t *ptr, const __m64 vec) {*reinterpret_cast<__m64*>(ptr) = vec;}",
        },
        UNPACK_UNALIGNED: {
            INT8: "[](int8_t *ptr, const __m64 vec) {std::memcpy(ptr, &vec, sizeof(__m64));}",
            INT16: "[](int16_t *ptr, const __m64 vec) {std::memcpy(ptr, &vec, sizeof(__m64));}",
            INT32: "[](int32_t *ptr, const __m64 vec) {std::memcpy(ptr, &vec, sizeof(__m64));}",
            UINT8: "[](uint8_t *ptr, const __m64 vec) {std::memcpy(ptr, &vec, sizeof(__m64));}",
            UINT16: "[](uint16_t *ptr, const __m64 vec) {std::memcpy(ptr, &vec, sizeof(__m64));}",
            UINT32: "[](uint32_t *ptr, const __m64 vec) {std::memcpy(ptr, &vec, sizeof(__m64));}",
        },
    },
    SSE: {
        PACK_ALIGNED: {
            FLOAT32: "_mm_load_ps",
        },
        PACK_UNALIGNED: {
            FLOAT32: "_mm_loadu_ps",
        },
        ADD: {
            FLOAT32: "_mm_add_ps",
        },
        SUB: {
            FLOAT32: "_mm_sub_ps",
        },
        MUL: {
            FLOAT32: "_mm_mul_ps",
        },
        DIV: {
            FLOAT32: "_mm_div_ps",
        },
        UNPACK_ALIGNED: {
            FLOAT32: "_mm_store_ps",
        },
        UNPACK_UNALIGNED: {
            FLOAT32: "_mm_storeu_ps",
        },
    },
    SSE2: { // revisit integer support for SSE versions, might have to add SSE3 section or something
        PACK_ALIGNED: {
            INT8: "[](const int8_t* ptr) {return _mm_load_si128(reinterpret_cast<const __m128i*>(ptr));}",
            INT16: "[](const int16_t* ptr) {return _mm_load_si128(reinterpret_cast<const __m128i*>(ptr));}",
            INT32: "[](const int32_t* ptr) {return _mm_load_si128(reinterpret_cast<const __m128i*>(ptr));}",
            INT64: "[](const int64_t* ptr) {return _mm_load_si128(reinterpret_cast<const __m128i*>(ptr));}",
            UINT8: "[](const uint8_t* ptr) {return _mm_load_si128(reinterpret_cast<const __m128i*>(ptr));}",
            UINT16: "[](const uint16_t* ptr) {return _mm_load_si128(reinterpret_cast<const __m128i*>(ptr));}",
            UINT32: "[](const uint32_t* ptr) {return _mm_load_si128(reinterpret_cast<const __m128i*>(ptr));}",
            UINT64: "[](const uint64_t* ptr) {return _mm_load_si128(reinterpret_cast<const __m128i*>(ptr));}",
            FLOAT64: "_mm_load_pd",
        },
        PACK_UNALIGNED: {
            INT8: "[](const int8_t* ptr) {return _mm_loadu_si128(reinterpret_cast<const __m128i*>(ptr));}",
            INT16: "[](const int16_t* ptr) {return _mm_loadu_si128(reinterpret_cast<const __m128i*>(ptr));}",
            INT32: "[](const int32_t* ptr) {return _mm_loadu_si128(reinterpret_cast<const __m128i*>(ptr));}",
            INT64: "[](const int64_t* ptr) {return _mm_loadu_si128(reinterpret_cast<const __m128i*>(ptr));}",
            UINT8: "[](const uint8_t* ptr) {return _mm_loadu_si128(reinterpret_cast<const __m128i*>(ptr));}",
            UINT16: "[](const uint16_t* ptr) {return _mm_loadu_si128(reinterpret_cast<const __m128i*>(ptr));}",
            UINT32: "[](const uint32_t* ptr) {return _mm_loadu_si128(reinterpret_cast<const __m128i*>(ptr));}",
            UINT64: "[](const uint64_t* ptr) {return _mm_loadu_si128(reinterpret_cast<const __m128i*>(ptr));}",
            FLOAT64: "_mm_loadu_pd",
        },
        ADD: {
            INT8: "_mm_add_epi8",
            INT16: "_mm_add_epi16",
            INT32: "_mm_add_epi32",
            INT64: "_mm_add_epi64",
            UINT8: "_mm_add_epi8",
            UINT16: "_mm_add_epi16",
            UINT32: "_mm_add_epi32",
            UINT64: "_mm_add_epi64",
            FLOAT64: "_mm_add_pd",
        },
        SUB: {
            INT8: "_mm_sub_epi8",
            INT16: "_mm_sub_epi16",
            INT32: "_mm_sub_epi32",
            INT64: "_mm_sub_epi64",
            UINT8: "_mm_sub_epi8",
            UINT16: "_mm_sub_epi16",
            UINT32: "_mm_sub_epi32",
            UINT64: "_mm_sub_epi64",
            FLOAT64: "_mm_sub_pd",
        },
        MUL: {
            INT16: "_mm_mullo_epi16",
            UINT16: "_mm_mullo_epi16",
            FLOAT64: "_mm_mul_pd",
        },
        DIV: {
            FLOAT64: "_mm_div_pd",
        },
        UNPACK_ALIGNED: {
            INT8: "[](int8_t* ptr, const __m128i vec) {_mm_store_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            INT16: "[](int16_t* ptr, const __m128i vec) {_mm_store_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            INT32: "[](int32_t* ptr, const __m128i vec) {_mm_store_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            INT64: "[](int64_t* ptr, const __m128i vec) {_mm_store_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            UINT8: "[](uint8_t* ptr, const __m128i vec) {_mm_store_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            UINT16: "[](uint16_t* ptr, const __m128i vec) {_mm_store_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            UINT32: "[](uint32_t* ptr, const __m128i vec) {_mm_store_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            UINT64: "[](uint64_t* ptr, const __m128i vec) {_mm_store_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            FLOAT64: "_mm_store_pd",
        },
        UNPACK_UNALIGNED: {
            INT8: "[](int8_t* ptr, const __m128i vec) {_mm_storeu_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            INT16: "[](int16_t* ptr, const __m128i vec) {_mm_storeu_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            INT32: "[](int32_t* ptr, const __m128i vec) {_mm_storeu_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            INT64: "[](int64_t* ptr, const __m128i vec) {_mm_storeu_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            UINT8: "[](uint8_t* ptr, const __m128i vec) {_mm_storeu_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            UINT16: "[](uint16_t* ptr, const __m128i vec) {_mm_storeu_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            UINT32: "[](uint32_t* ptr, const __m128i vec) {_mm_storeu_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            UINT64: "[](uint64_t* ptr, const __m128i vec) {_mm_storeu_si128(reinterpret_cast<__m128i*>(ptr), vec);}",
            FLOAT64: "_mm_storeu_pd",
        },
    },
    AVX: {
        PACK_ALIGNED: {
            FLOAT32: "_mm256_load_ps",
            FLOAT64: "_mm256_load_pd",
        },
        PACK_UNALIGNED: {
            FLOAT32: "_mm256_loadu_ps",
            FLOAT64: "_mm256_loadu_pd",
        },
        ADD: {
            FLOAT32: "_mm256_add_ps",
            FLOAT64: "_mm256_add_pd",
        },
        SUB: {
            FLOAT32: "_mm256_sub_ps",
            FLOAT64: "_mm256_sub_pd",
        },
        MUL: {
            FLOAT32: "_mm256_mul_ps",
            FLOAT64: "_mm256_mul_pd",
        },
        DIV: {
            FLOAT32: "_mm256_div_ps",
            FLOAT64: "_mm256_div_pd",
        },
        UNPACK_ALIGNED: {
            FLOAT32: "_mm256_store_ps",
            FLOAT64: "_mm256_store_pd",
        },
        UNPACK_UNALIGNED: {
            FLOAT32: "_mm256_storeu_ps",
            FLOAT64: "_mm256_storeu_pd",
        },
    },
    AVX2: {
        PACK_ALIGNED: {
            INT8: "[](const int8_t* ptr) {return _mm256_load_si256(reinterpret_cast<const __m256i*>(ptr));}",
            INT16: "[](const int16_t* ptr) {return _mm256_load_si256(reinterpret_cast<const __m256i*>(ptr));}",
            INT32: "[](const int32_t* ptr) {return _mm256_load_si256(reinterpret_cast<const __m256i*>(ptr));}",
            INT64: "[](const int64_t* ptr) {return _mm256_load_si256(reinterpret_cast<const __m256i*>(ptr));}",
            UINT8: "[](const uint8_t* ptr) {return _mm256_load_si256(reinterpret_cast<const __m256i*>(ptr));}",
            UINT16: "[](const uint16_t* ptr) {return _mm256_load_si256(reinterpret_cast<const __m256i*>(ptr));}",
            UINT32: "[](const uint32_t* ptr) {return _mm256_load_si256(reinterpret_cast<const __m256i*>(ptr));}",
            UINT64: "[](const uint64_t* ptr) {return _mm256_load_si256(reinterpret_cast<const __m256i*>(ptr));}",
        },
        PACK_UNALIGNED: {
            INT8: "[](const int8_t* ptr) {return _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));}",
            INT16: "[](const int16_t* ptr) {return _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));}",
            INT32: "[](const int32_t* ptr) {return _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));}",
            INT64: "[](const int64_t* ptr) {return _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));}",
            UINT8: "[](const uint8_t* ptr) {return _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));}",
            UINT16: "[](const uint16_t* ptr) {return _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));}",
            UINT32: "[](const uint32_t* ptr) {return _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));}",
            UINT64: "[](const uint64_t* ptr) {return _mm256_loadu_si256(reinterpret_cast<const __m256i*>(ptr));}",
        },
        ADD: {
            INT8: "_mm256_add_epi8",
            INT16: "_mm256_add_epi16",
            INT32: "_mm256_add_epi32",
            INT64: "_mm256_add_epi64",
            UINT8: "_mm256_add_epi8",
            UINT16: "_mm256_add_epi16",
            UINT32: "_mm256_add_epi32",
            UINT64: "_mm256_add_epi64",
        },
        SUB: {
            INT8: "_mm256_sub_epi8",
            INT16: "_mm256_sub_epi16",
            INT32: "_mm256_sub_epi32",
            INT64: "_mm256_sub_epi64",
            UINT8: "_mm256_sub_epi8",
            UINT16: "_mm256_sub_epi16",
            UINT32: "_mm256_sub_epi32",
            UINT64: "_mm256_sub_epi64",
        },
        MUL: {
            INT16: "_mm256_mullo_epi16",
            INT32: "_mm256_mullo_epi32",
            UINT16: "_mm256_mullo_epi16",
            UINT32: "_mm256_mullo_epi32",
        },
        DIV: {
            // no support
        },
        UNPACK_ALIGNED: {
            INT8: "[](int8_t* ptr, const __m256i vec) {_mm256_store_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            INT16: "[](int16_t* ptr, const __m256i vec) {_mm256_store_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            INT32: "[](int32_t* ptr, const __m256i vec) {_mm256_store_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            INT64: "[](int64_t* ptr, const __m256i vec) {_mm256_store_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            UINT8: "[](uint8_t* ptr, const __m256i vec) {_mm256_store_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            UINT16: "[](uint16_t* ptr, const __m256i vec) {_mm256_store_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            UINT32: "[](uint32_t* ptr, const __m256i vec) {_mm256_store_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            UINT64: "[](uint64_t* ptr, const __m256i vec) {_mm256_store_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
        },
        UNPACK_UNALIGNED: {
            INT8: "[](int8_t* ptr, const __m256i vec) {_mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            INT16: "[](int16_t* ptr, const __m256i vec) {_mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            INT32: "[](int32_t* ptr, const __m256i vec) {_mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            INT64: "[](int64_t* ptr, const __m256i vec) {_mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            UINT8: "[](uint8_t* ptr, const __m256i vec) {_mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            UINT16: "[](uint16_t* ptr, const __m256i vec) {_mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            UINT32: "[](uint32_t* ptr, const __m256i vec) {_mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
            UINT64: "[](uint64_t* ptr, const __m256i vec) {_mm256_storeu_si256(reinterpret_cast<__m256i*>(ptr), vec);}",
        },
    },
}; // functions

const simdMeta = {
    MMX: {name: "mmx", ifdefMacro: "__MMX__", header: "mmintrin.h", bitSize: 64},
    SSE: {name: "sse", ifdefMacro: "__SSE__", header: "xmmintrin.h", bitSize: 128},
    SSE2: {name: "sse2", ifdefMacro: "__SSE2__", header: "emmintrin.h", bitSize: 128},
    AVX: {name: "avx", ifdefMacro: "__AVX__", header: "immintrin.h", bitSize: 256},
    AVX2: {name: "avx2", ifdefMacro: "__AVX2__", header: "immintrin.h", bitSize: 256},
}; // simdMeta

const numMeta = {
    INT8: {className: "int8", numName: "int8_t", bitSize: 8},
    INT16: {className: "int16", numName: "int16_t", bitSize: 16},
    INT32: {className: "int32", numName: "int32_t", bitSize: 32},
    INT64: {className: "int64", numName: "int64_t", bitSize: 64},
    INT128: {className: "int128", numName: "__int128_t", bitSize: 128},
    UINT8: {className: "uint8", numName: "uint8_t", bitSize: 8},
    UINT16: {className: "uint16", numName: "uint16_t", bitSize: 16},
    UINT32: {className: "uint32", numName: "uint32_t", bitSize: 32},
    UINT64: {className: "uint64", numName: "uint64_t", bitSize: 64},
    UINT128: {className: "uint128", numName: "__uint128_t", bitSize: 128},
    FLOAT16: {className: "float16", numName: "not yet implemented", bitSize: 16},
    FLOAT32: {className: "float32", numName: "float", bitSize: 32},
    FLOAT64: {className: "float64", numName: "double", bitSize: 64},
    FLOAT128: {className: "float128", numName: "long double", bitSize: 128},
}; // numMeta

const opMeta = {
    ADD: {name: "add", capsName: "ADD", op: "+"},
    SUB: {name: "sub", capsName: "SUB", op: "-"},
    MUL: {name: "mul", capsName: "MUL", op: "*"},
    DIV: {name: "div", capsName: "DIV", op: "/"},
};

module.exports = {
    simdRegTypenames,
    supportedOps,
    functions,
    simdMeta,
    numMeta,
    opMeta,
};